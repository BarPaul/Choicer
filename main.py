from os import getenv
from datetime import datetime
from keep_alive import keep_alive
from pytz import timezone
from logging import getLogger, INFO, basicConfig, Formatter
from telebot import TeleBot, types
from card_module import Card, is_right, MASTI, NUMS
from json import load, dump
import time


DATA = load(open('./data.json'))
PRINT_NUMS = [str(i) for i in range(2, 11)] + ["–í", "–î", "–ö", "–¢"]
TOKEN = str(getenv("TOKEN"))
MENU = types.ReplyKeyboardMarkup(resize_keyboard=True)
MENU.add("üîù –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", "üßÆ –°–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç")
MENU.add("üõü –ü–æ–º–æ—â—å", "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
GAME = types.ReplyKeyboardMarkup()
GAME.add("üçè –õ–µ–≥–∫–∏–π", "üçå –°—Ä–µ–¥–Ω–∏–π", "üå∂Ô∏è –°–ª–æ–∂–Ω—ã–π", "‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è")
bot = TeleBot(TOKEN, parse_mode='markdown')
CARDS = types.ReplyKeyboardMarkup(resize_keyboard=True)
cards, tmp = {
    h2 + a2: h1 + a1
    for h1, h2 in zip(MASTI, ('‚ô¶Ô∏è', '‚ô•Ô∏è', '‚ô†Ô∏è', '‚ô£Ô∏è'))
    for a1, a2 in zip(NUMS, PRINT_NUMS)
}, []
for i, k in enumerate(cards):
  tmp.append(k)
  if len(tmp) % 13 == 0:
    CARDS.row(*tmp)
    tmp = []
CARDS.row(*tmp)
CARDS.add("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è")
logger = getLogger(__name__)


def timeconverter(*args):
  return datetime.now(timezone('Europe/Moscow')).timetuple()


Formatter.converter = timeconverter
basicConfig(level=INFO,
            format='(%(asctime)s %(levelname)s) –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %(message)s',
            datefmt="%d-%m-%Y %H:%M:%S")
logger.info("–∑–∞–ø—É—â–µ–Ω!")



def update_data():
  with open('./data.json', 'w') as f:
    dump(DATA, f)


def reset(message: types.Message):
  if message.text.upper() == "–î–ê":
    logger.warning(
        f"{message.from_user.full_name} ({message.from_user.id}) —Å–±—Ä–æ—Å–∏–ª —Å–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!"
    )
    DATA.pop(str(message.from_user.id))
    update_data()
    return bot.reply_to(message, "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!")
  return bot.reply_to(message, "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!")


@bot.message_handler(commands=['start'])
def start_command(message: types.Message):
  uid = str(message.from_user.id)
  user = DATA.get(uid, None)
  if user is None:
    logger.info(
        f"{message.from_user.full_name} ({message.from_user.id}) –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è"
    )
    DATA[uid] = {"count": 0, "right": 0, "in_game": False, "points": 0}
    update_data()
  bot.reply_to(
      message,
      f"–ü—Ä–∏–≤–µ—Ç, *{message.from_user.full_name}*! –ü–æ–∏–≥—Ä–∞–µ–º –≤ —É–≥–∞–¥–∞–π–∫—É?",
      reply_markup=MENU)


@bot.message_handler(content_types=["text"])
def info_command(message: types.Message):
  user = DATA.get(str(message.from_user.id), None)
  if user is None:
    return bot.reply_to(
        message,
        "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å–≤—É—é—Ç –≤ –±–æ—Ç–µ! –ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–± –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
  if message.text == '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è':
    logger.info(
        f"{message.from_user.full_name} ({message.from_user.id}) –ø–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ"
    )
    try:
      bot.reply_to(
          message,
          f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {message.from_user.full_name}\nüî¢ –í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤: *{user['count']}*\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: *{user['right']}*\nüíØ –¢–≤–æ–π —Å—á–µ—Ç: *{user['points']}*\n‚è±Ô∏è –¢–æ—á–Ω–æ—Å—Ç—å: *{user['right']/user['count'] * 100:.2f}*%"
      )
    except ZeroDivisionError:
      bot.reply_to(
          message,
          f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {message.from_user.full_name}\nüî¢ –í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤: *{user['count']}*\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: *0*\nüíØ –¢–≤–æ–π —Å—á–µ—Ç: *0*\n‚è±Ô∏è –¢–æ—á–Ω–æ—Å—Ç—å: *0.00*%"
      )
  elif message.text == "üõü –ü–æ–º–æ—â—å":
    logger.info(
        f"{message.from_user.full_name} ({message.from_user.id}) –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–º–æ—â—å"
    )
    bot.reply_to(
        message,
        '''> *–ö–∞–∫ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É?* \n> –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "_üîù –ù–∞—á–∞—Ç—å –∏–≥—Ä—É_"\n\n> *–£—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏* \n> –ï—Å—Ç—å *3* —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: –ª–µ–≥–∫–∏–π, —Å—Ä–µ–¥–Ω–∏–π, —Å–ª–æ–∂–Ω—ã–π\n> –í –ª–µ–≥–∫–æ–º –Ω—É–∂–Ω–æ —É–≥–∞–¥–∞—Ç—å –º–∞—Å—Ç—å, –≤ —Å—Ä–µ–¥–Ω–µ–º –º–∞—Å—Ç—å –∫–∞—Ä—Ç—ã, –∞ –≤ —Å–ª–æ–∂–Ω–æ–º \- —Å–∞–º—É –∫–∞—Ä—Ç—É\n> –ó–∞ –ª–µ–≥–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å \- 5 –æ—á–∫–æ–≤, —Å—Ä–µ–¥–Ω–∏–π \- 20 –æ—á–∫–æ–≤ –∏ –∑–∞ —Å–ª–æ–∂–Ω—ã–π \- 50 –æ—á–∫–æ–≤\n> *–ì–¥–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã?*\n> –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–∂–Ω–æ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "_‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è_", —Ç–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Å –¥—Ä—É–∑—å–º—è–º–∏ :\)\n\n> *–ö–∞–∫ —Å–±—Ä–æ—Å–∏—Ç—å —Å–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç?*\n> –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "_üßÆ –°–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç_"\n\n> *–ù–∞—à–µ–ª –æ—à–∏–±–∫—É –≤ –±–æ—Ç–µ, –∫–æ–º—É –Ω–∞–ø–∏—Å–∞—Ç—å?* \n> –ù–∞–ø–∏—à–∏—Ç–µ [—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É](https://t.me/PaulBaur) –±–æ—Ç–∞ –≤ –ª—Å\.\n> –í—Å–µ–≥–¥–∞ —Ä–∞–¥ –≤–∞—à–∏–º –≤–æ–ø—Ä–æ—Å–∞–º, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º –æ –±–∞–≥–∞—Ö :\)''',
        parse_mode='markdownV2')
  elif message.text == "üßÆ –°–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç":
    logger.warning(
        f"{message.from_user.full_name} ({message.from_user.id}) —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è —Å–±—Ä–æ—Å–∏—Ç—å —Å–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!"
    )
    bot.reply_to(
        message,
        "–¢—ã —É–≤–µ—Ä–µ–Ω? (–Ω–∞–ø–∏—à–∏ –¥–∞ –∏–ª–∏ –Ω–µ—Ç)\n*–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!*")
    bot.register_next_step_handler_by_chat_id(message.chat.id, reset)
  elif message.text == 'üîù –ù–∞—á–∞—Ç—å –∏–≥—Ä—É':
    logger.info(
        f"{message.from_user.full_name} ({message.from_user.id}) –ø–µ—Ä–µ—à–µ–ª –∫ –≤—ã–±–æ—Ä—É —É—Ä–æ–≤–Ω–µ–π"
    )
    if user['in_game']:
      return bot.reply_to(
          message,
          "–¢—ã —É–∂–µ –∏–≥—Ä–∞–µ—à—å! –ù–µ–ª—å–∑—è –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É, –Ω–µ –∑–∞–∫–æ–Ω—á–∏–≤ —Å—Ç–∞—Ä—É—é")

    bot.reply_to(
        message,
        "–í—ã–±–µ—Ä–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å::\nüü¢ *–õ–µ–≥–∫–∏–π —É—Ä–æ–≤–µ–Ω—å* - —É–≥–∞–¥–∞—Ç—å —Ü–≤–µ—Ç –º–∞—Å—Ç–∏\nüü° *–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å* - —É–≥–∞–¥–∞—Ç—å –º–∞—Å—Ç—å –∫–∞—Ä—Ç—ã\nüî¥ *–°–ª–æ–∂–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å* - —É–≥–∞–¥–∞—Ç—å –∫–∞—Ä—Ç—É\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è\", —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=GAME)
  elif message.text == '‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è':
    logger.info(
        f"{message.from_user.full_name} ({message.from_user.id}) –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    )
    return bot.reply_to(message,
                        "–¢—ã –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                        reply_markup=MENU)
  elif message.text == 'üçè –õ–µ–≥–∫–∏–π':
    logger.info(
        f"{message.from_user.full_name} ({message.from_user.id}) –≤—ã–±–∏—Ä–∞–µ—Ç –ª–µ–≥–∫–∏–π —É—Ä–æ–≤–µ–Ω—å"
    )
    user['in_game'] = True
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üü• –ö—Ä–∞—Å–Ω—ã–π", "‚¨õ –ß–µ—Ä–Ω—ã–π")
    keyboard.add("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è")
    bot.reply_to(message,
                 "–Ø –∑–∞–≥–∞–¥–∞–ª –∫–∞—Ä—Ç—É. –£–≥–∞–¥–∞–π —Ü–≤–µ—Ç –º–∞—Å—Ç–∏ :)",
                 reply_markup=keyboard)

    def answer_easy(message: types.Message):

      if message.text == '‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è':
        logger.info(
            f"{message.from_user.full_name} ({message.from_user.id}) –≤–æ–∑—Ä–∞—â–∞–µ—Ç—Å—è –≤ –∏–≥—Ä–æ–≤–æ–µ –º–µ–Ω—é"
        )
        user['in_game'] = False
        return bot.reply_to(message,
                            "–¢—ã –≤–µ—Ä–Ω—É–ª—Å—è –≤ –∏–≥—Ä–æ–≤–æ–µ –º–µ–Ω—é",
                            reply_markup=GAME)
      if message.text not in ["üü• –ö—Ä–∞—Å–Ω—ã–π", "‚¨õ –ß–µ—Ä–Ω—ã–π"]:
        logger.info(
            f"{message.from_user.full_name} ({message.from_user.id}) –≤—ã–±–∏—Ä–∞–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ü–≤–µ—Ç"
        )
        return bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ü–≤–µ—Ç!")
      user['in_game'] = False
      user['count'] += 1
      user_card = Card("H" if message.text.startswith("üü•") else "S")
      isrght, ans_card = is_right(user_card)
      logger.info(
          f"{message.from_user.full_name} ({message.from_user.id}) –≤—ã–±–∏—Ä–∞–µ—Ç {message.text}, –ø–æ–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –≤—ã–±—Ä–∞–ª–∞ {ans_card}"
      )
      if isrght:
        logger.info(
            f"{message.from_user.full_name} ({message.from_user.id}) –ø–æ–ª—É—á–∞–µ—Ç 5 –æ—á–∫–æ–≤ –∑–∞ –ø–æ–±–µ–¥—É –≤ –ª–µ–≥–∫–æ–º —É—Ä–æ–≤–Ω–µ"
        )
        user['points'] += 5
        user['right'] += 1
        bot.send_photo(
            chat_id=message.chat.id,
            reply_to_message_id=message.id,
            caption=
            "‚úÖ –¢—ã —É–≥–∞–¥–∞–ª!\n +5 –æ—á–∫–æ–≤\n–£–∑–Ω–∞—Ç—å —Å–≤–æ–π —Å—á–µ—Ç –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ \"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\"",
            photo=open(f'./{ans_card[0]}/{ans_card[1:]}.png', 'rb'))
        update_data()
        return bot.register_next_step_handler_by_chat_id(
            message.chat.id, answer_easy)
      bot.send_photo(chat_id=message.chat.id,
                     reply_to_message_id=message.id,
                     caption="‚ùå –ù–µ —É–≥–∞–¥–∞–ª!",
                     photo=open(f'./{ans_card[0]}/{ans_card[1:]}.png', 'rb'))
      update_data()
      logger.info(
          f"{message.from_user.full_name} ({message.from_user.id}) –ø–æ—Ä–∞–∂–µ–Ω –≤ –ª–µ–≥–∫–æ–º —É—Ä–æ–≤–Ω–µ"
      )
      return bot.register_next_step_handler_by_chat_id(message.chat.id,
                                                       answer_easy)

    return bot.register_next_step_handler_by_chat_id(message.chat.id,
                                                     answer_easy)
  elif message.text == 'üçå –°—Ä–µ–¥–Ω–∏–π':
    logger.info(
        f"{message.from_user.full_name} ({message.from_user.id}) –≤—ã–±–∏—Ä–∞–µ—Ç —Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å"
    )
    user['in_game'] = True
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("‚ô¶Ô∏è –ë—É–±–Ω—ã", "‚ô•Ô∏è –ß–µ—Ä–≤—ã", '‚ô†Ô∏è –ü–∏–∫–∏', '‚ô£Ô∏è –¢—Ä–µ—Ñ—ã')
    keyboard.add("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è")
    bot.reply_to(message,
                 "–Ø –∑–∞–≥–∞–¥–∞–ª –∫–∞—Ä—Ç—É. –£–≥–∞–¥–∞–π –º–∞—Å—Ç—å :)",
                 reply_markup=keyboard)

    def answer_middle(message: types.Message):
      if message.text == '‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è':
        logger.info(
            f"{message.from_user.full_name} ({message.from_user.id}) –≤–æ–∑—Ä–∞—â–∞–µ—Ç—Å—è –≤ –∏–≥—Ä–æ–≤–æ–µ –º–µ–Ω—é"
        )
        user['in_game'] = False
        return bot.reply_to(message,
                            "–¢—ã –≤–µ—Ä–Ω—É–ª—Å—è –≤ –∏–≥—Ä–æ–≤–æ–µ –º–µ–Ω—é",
                            reply_markup=GAME)
      if message.text not in ["‚ô¶Ô∏è –ë—É–±–Ω—ã", "‚ô•Ô∏è –ß–µ—Ä–≤—ã", '‚ô†Ô∏è –ü–∏–∫–∏', '‚ô£Ô∏è –¢—Ä–µ—Ñ—ã']:
        logger.info(
            f"{message.from_user.full_name} ({message.from_user.id}) –≤—ã–±–∏—Ä–∞–µ—Ç –Ω–µ–≤–µ—Ä–Ω—É—é –º–∞—Å—Ç—å"
        )
        return bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω–∞—è –º–∞—Å—Ç—å!")
      user['in_game'] = False
      user['count'] += 1
      masts = {
          "‚ô¶Ô∏è –ë—É–±–Ω—ã": 'D',
          "‚ô•Ô∏è –ß–µ—Ä–≤—ã": 'H',
          '‚ô†Ô∏è –ü–∏–∫–∏': 'S',
          '‚ô£Ô∏è –¢—Ä–µ—Ñ—ã': 'C'
      }
      user_card = Card(masts[message.text], 2)
      isrght, ans_card = is_right(user_card)
      logger.info(
          f"{message.from_user.full_name} ({message.from_user.id}) –≤—ã–±–∏—Ä–∞–µ—Ç {message.text}, –∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –≤—ã–±—Ä–∞–ª–∞ {ans_card}"
      )
      if isrght:
        logger.info(
            f"{message.from_user.full_name} ({message.from_user.id}) –ø–æ–ª—É—á–∞–µ—Ç 20 –æ—á–∫–æ–≤ –∑–∞ –ø–æ–±–µ–¥—É –≤ —Å—Ä–µ–¥–Ω–µ–º —É—Ä–æ–≤–Ω–µ"
        )
        user['points'] += 20
        user['right'] += 1
        bot.send_photo(
            chat_id=message.chat.id,
            reply_to_message_id=message.id,
            caption=
            "‚úÖ –¢—ã —É–≥–∞–¥–∞–ª!\n +20 –æ—á–∫–æ–≤\n–£–∑–Ω–∞—Ç—å —Å–≤–æ–π —Å—á–µ—Ç –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ \"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\"",
            photo=open(f'./{ans_card[0]}/{ans_card[1:]}.png', 'rb'))
        update_data()
        return bot.register_next_step_handler_by_chat_id(
            message.chat.id, answer_middle)
      logger.info(
          f"{message.from_user.full_name} ({message.from_user.id}) –ø–æ—Ä–∞–∂–µ–Ω –≤ —Å—Ä–µ–¥–Ω–µ–º —É—Ä–æ–≤–Ω–µ"
      )
      bot.send_photo(chat_id=message.chat.id,
                     reply_to_message_id=message.id,
                     caption="‚ùå –ù–µ —É–≥–∞–¥–∞–ª!",
                     photo=open(f'./{ans_card[0]}/{ans_card[1:]}.png', 'rb'))
      update_data()
      return bot.register_next_step_handler_by_chat_id(message.chat.id,
                                                       answer_middle)

    return bot.register_next_step_handler_by_chat_id(message.chat.id,
                                                     answer_middle)
  elif message.text == 'üå∂Ô∏è –°–ª–æ–∂–Ω—ã–π':
    logger.info(
        f"{message.from_user.full_name} ({message.from_user.id}) –≤—ã–±–∏—Ä–∞–µ—Ç —Å–ª–æ–∂–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å"
    )
    user['in_game'] = True
    bot.reply_to(message,
                 "–Ø –∑–∞–≥–∞–¥–∞–ª –∫–∞—Ä—Ç—É. –£–≥–∞–¥–∞–π –∫–∞—Ä—Ç—É :)",
                 reply_markup=CARDS)

    def answer_hard(message: types.Message):
      if message.text == '‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è':
        logger.info(
            f"{message.from_user.full_name} ({message.from_user.id}) –≤–æ–∑—Ä–∞—â–∞–µ—Ç—Å—è –≤ –∏–≥—Ä–æ–≤–æ–µ –º–µ–Ω—é"
        )
        user['in_game'] = False
        return bot.reply_to(message,
                            "–¢—ã –≤–µ—Ä–Ω—É–ª—Å—è –≤ –∏–≥—Ä–æ–≤–æ–µ –º–µ–Ω—é",
                            reply_markup=GAME)
      if message.text not in cards.keys():
        logger.info(
            f"{message.from_user.full_name} ({message.from_user.id}) –≤—ã–±–∏—Ä–∞–µ—Ç –Ω–µ–≤–µ—Ä–Ω—É—é –∫–∞—Ä—Ç—É"
        )
        return bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞!")
      user['in_game'] = False
      user['count'] += 1
      user_card = Card(cards[message.text], 3)
      isrght, ans_card = is_right(user_card)
      logger.info(
          f"{message.from_user.full_name} ({message.from_user.id}) –≤—ã–±–∏—Ä–∞–µ—Ç {message.text}, –ø–æ–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –≤—ã–±—Ä–∞–ª–∞ {ans_card}"
      )
      if isrght:
        logger.info(
            f"{message.from_user.full_name} ({message.from_user.id}) –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç 50 –æ—á–∫–æ–≤ –∑–∞ –ø–æ–±–µ–¥—É –≤ —Å–ª–æ–∂–Ω–æ–º —É—Ä–æ–≤–Ω–µ"
        )
        user['points'] += 50
        user['right'] += 1
        bot.send_photo(
            chat_id=message.chat.id,
            reply_to_message_id=message.id,
            caption=
            "‚úÖ –¢—ã —É–≥–∞–¥–∞–ª!\n +50 –æ—á–∫–æ–≤\n–£–∑–Ω–∞—Ç—å —Å–≤–æ–π —Å—á–µ—Ç –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ \"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\"",
            photo=open(f'./{ans_card[0]}/{ans_card[1:]}.png', 'rb'))
        update_data()
        return bot.register_next_step_handler_by_chat_id(
            message.chat.id, answer_hard)
      logger.info(
          f"{message.from_user.full_name} ({message.from_user.id}) –ø–æ—Ä–∞–∂–µ–Ω –≤ —Å–ª–æ–∂–Ω–æ–º —É—Ä–æ–≤–Ω–µ"
      )
      bot.send_photo(chat_id=message.chat.id,
                     reply_to_message_id=message.id,
                     caption="‚ùå –ù–µ —É–≥–∞–¥–∞–ª!",
                     photo=open(f'./{ans_card[0]}/{ans_card[1:]}.png', 'rb'))
      update_data()
      return bot.register_next_step_handler_by_chat_id(message.chat.id,
                                                       answer_hard)

    return bot.register_next_step_handler_by_chat_id(message.chat.id,
                                                     answer_hard)


if __name__ == '__main__':
  keep_alive()
  bot.infinity_polling(none_stop=True)
